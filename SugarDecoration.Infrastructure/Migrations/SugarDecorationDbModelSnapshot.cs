// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SugarDecoration.Infrastructure.Data;

#nullable disable

namespace SugarDecoration.Infrastructure.Migrations
{
    [DbContext(typeof(SugarDecorationDb))]
    partial class SugarDecorationDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1182e1d8-c799-413d-a9d3-c809966f5ed2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "664c641b-55cd-4708-b246-e61af33c6bac",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.bg",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMrTql04o9w3ebG43irWUUt18dWRxEsze6HsvhIowcLfaCwNp9THJavwWdyMnDT97Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de4e8746-9f0d-40d1-aca1-65f7435ae428",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = "3b034442-ee41-4acb-92cb-374f72d60a59",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd2bc12f-53f9-4a12-bea9-99144a9c0350",
                            Email = "g_ivanov@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "G_IVANOV@ABV.bg",
                            NormalizedUserName = "GOSHE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJeHc7TZw1JH7ruOL+kCUUxz9QDj8zaVCHR4ChdNF9Ak7Zyefnhf1M/nBEi0CDNJew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35c94506-e15a-43c2-91e9-9ea3736f15c7",
                            TwoFactorEnabled = false,
                            UserName = "g_ivanov@abv.bg"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Biscuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Biscuit identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Biscuit quantity");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Biscuits");

                    b.HasComment("Biscuit table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ProductId = 21,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ProductId = 22,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ProductId = 23,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ProductId = 24,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            ProductId = 25,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ProductId = 26,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            ProductId = 27,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            ProductId = 28,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ProductId = 29,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            ProductId = 30,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            ProductId = 31,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            ProductId = 32,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            ProductId = 33,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            ProductId = 34,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            ProductId = 35,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            ProductId = 36,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            ProductId = 37,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            ProductId = 38,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            ProductId = 39,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            ProductId = 40,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.BiscuitCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("BiscuitCategories");

                    b.HasComment("Category for biscuit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Коледни"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Декоративни"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Специален повод"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cake identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Cake form");

                    b.Property<int>("Layers")
                        .HasColumnType("int")
                        .HasComment("Cake layers");

                    b.Property<int>("Portions")
                        .HasColumnType("int")
                        .HasComment("Cake portions");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cakes");

                    b.HasComment("Cake table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 35,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 20,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 20,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 25,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 35,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 10,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 35,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Form = "правоъгълна",
                            Layers = 1,
                            Portions = 20,
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 30,
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Form = "правоъгълна",
                            Layers = 1,
                            Portions = 20,
                            ProductId = 16
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Form = "правоъгълна",
                            Layers = 1,
                            Portions = 35,
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 30,
                            ProductId = 18
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 35,
                            ProductId = 19
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 25,
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CakeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("CakeCategories");

                    b.HasComment("Category for cake");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Сватбена торта"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Детска торта"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Стандартна торта"
                        },
                        new
                        {
                            Id = 4,
                            Name = "18+"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Специални поводи"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cart identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation of cart");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit")
                        .HasComment("Is the cart ordered");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification of cart");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Costumer identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasComment("Cart table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 667, DateTimeKind.Local).AddTicks(4233),
                            IsOrdered = false,
                            ModifiedOn = new DateTime(2024, 4, 20, 20, 13, 15, 667, DateTimeKind.Local).AddTicks(4240),
                            UserId = "3b034442-ee41-4acb-92cb-374f72d60a59"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("CartItem identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("Cart identifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User's number");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasComment("AProduct identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Description of order");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasComment("Cart item");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            ProductId = 1,
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            ProductId = 2,
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            Id = 4,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            Quantity = 1,
                            Text = "Бих искал торта с леги нинджаго ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            Id = 5,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            ProductId = 8,
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            Id = 6,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            ProductId = 2,
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            Id = 7,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            ProductId = 10,
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            Id = 8,
                            CartId = 1,
                            PhoneNumber = "+398987645",
                            Quantity = 1,
                            Text = "Бих искал обикновена синя торта само ако може да е за 20 парчета без име."
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("Cart identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of order");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasComment("Order table");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation of the product");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Product image");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product title");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasComment("Product table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2119),
                            ImageUrl = "~/images/seeding/cake/Pirates(Adriana 7).jpg",
                            Price = 100.00m,
                            Title = "Пирати(Адриана 7)"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2152),
                            ImageUrl = "~/images/seeding/cake/PinkSweet(Ivanina 8).jpg",
                            Price = 120.00m,
                            Title = "Розово сладко(Иванина 8)"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2155),
                            ImageUrl = "~/images/seeding/cake/Simba(Kiril 1).jpg",
                            Price = 150.00m,
                            Title = "Симба(Кирил 1)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2157),
                            ImageUrl = "~/images/seeding/cake/Turning30.jpg",
                            Price = 120.00m,
                            Title = "Why, god, why?"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2160),
                            ImageUrl = "~/images/seeding/cake/BlueCakeWithFeathers.jpg",
                            Price = 110.00m,
                            Title = "Погачата на Георги"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2163),
                            ImageUrl = "~/images/seeding/cake/ToughtWay.jpg",
                            Price = 60.00m,
                            Title = "Препятствия по пътя"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2166),
                            ImageUrl = "~/images/seeding/cake/Karate(Vesko10).jpg",
                            Price = 70.00m,
                            Title = "Карате(Веско 10)"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2168),
                            ImageUrl = "~/images/seeding/cake/Barbie(Mariela 10).jpg",
                            Price = 65.00m,
                            Title = "Барби(Мариела 7)"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2170),
                            ImageUrl = "~/images/seeding/cake/AnimalPicnic(Nikola 1).jpg",
                            Price = 80.00m,
                            Title = "Мечо Пух(Никола 1)"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2174),
                            ImageUrl = "~/images/seeding/cake/BlueButterflies(Nikol 7).jpg",
                            Price = 50.00m,
                            Title = "Сини Пеперуди(Никол 7)"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2176),
                            ImageUrl = "~/images/seeding/cake/MiniMaus(Teodora 2).jpg",
                            Price = 80.00m,
                            Title = "Мини Маус(Теодора 2)"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2178),
                            ImageUrl = "~/images/seeding/cake/CristianRonaldo(Metodi 8).jpg",
                            Price = 100.00m,
                            Title = "Кристиано Роналдо(Методи 8)"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2181),
                            ImageUrl = "~/images/seeding/cake/PinkPrincess(Marieta 10).jpg",
                            Price = 150.00m,
                            Title = "Розова принцеса(Мариета 10)"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2183),
                            ImageUrl = "~/images/seeding/cake/RaceWithCars(Kristian 3).jpg",
                            Price = 120.00m,
                            Title = "Състезание с коли(Кристиян 3)"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2186),
                            ImageUrl = "~/images/seeding/cake/Hlapetata(Denis 5).jpg",
                            Price = 110.00m,
                            Title = "Хлапетата/Пирин(Денис 5)"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2188),
                            ImageUrl = "~/images/seeding/cake/PinkFlowers(Borisa 4).jpg",
                            Price = 60.00m,
                            Title = "Розови цветя(Бориса 4)"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2191),
                            ImageUrl = "~/images/seeding/cake/PinkGymnastic(Antonia 13).jpg",
                            Price = 70.00m,
                            Title = "Розова гимнастика(Антония 13)"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2194),
                            ImageUrl = "~/images/seeding/cake/Messi(Iliqn).jpg",
                            Price = 65.00m,
                            Title = "Аржентина/Меси(Илиян)"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2196),
                            ImageUrl = "~/images/seeding/cake/Lego(Adrian 3).jpg",
                            Price = 80.00m,
                            Title = "Лего(Адриан 3)"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2198),
                            ImageUrl = "~/images/seeding/cake/GoldenRoses.jpg",
                            Price = 50.00m,
                            Title = "Златни рози"
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2201),
                            ImageUrl = "~/images/seeding/biscuit/ChristmasTrees.jpg",
                            Price = 10.00m,
                            Title = "Коледни елхи"
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2203),
                            ImageUrl = "~/images/seeding/biscuit/ChristmasFigures.jpg",
                            Price = 12.00m,
                            Title = "Коледни фигури"
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2206),
                            ImageUrl = "~/images/seeding/biscuit/WinterFigures.jpg",
                            Price = 15.00m,
                            Title = "Зимни сладки"
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2208),
                            ImageUrl = "~/images/seeding/biscuit/DecorativePonies.jpg",
                            Price = 13.00m,
                            Title = "Декоративни еднорози"
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2252),
                            ImageUrl = "~/images/seeding/biscuit/SpringThema.jpg",
                            Price = 11.00m,
                            Title = "Пролетна тема"
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2255),
                            ImageUrl = "~/images/seeding/biscuit/DecorativeKittens.jpg",
                            Price = 10.00m,
                            Title = "Декоративни котета"
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2258),
                            ImageUrl = "~/images/seeding/biscuit/ChristmasBiscuits.jpg",
                            Price = 12.00m,
                            Title = "Коледни сладки"
                        },
                        new
                        {
                            Id = 28,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2260),
                            ImageUrl = "~/images/seeding/biscuit/SpringLove.jpg",
                            Price = 15.00m,
                            Title = "Пролетна любов"
                        },
                        new
                        {
                            Id = 29,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2263),
                            ImageUrl = "~/images/seeding/biscuit/BearsBonbons.jpg",
                            Price = 13.00m,
                            Title = "Бонбони мечки на клечка"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2265),
                            ImageUrl = "~/images/seeding/biscuit/MiniMaus.jpg",
                            Price = 11.00m,
                            Title = "Мини маус"
                        },
                        new
                        {
                            Id = 31,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2267),
                            ImageUrl = "~/images/seeding/biscuit/BabysBiscuits.jpg",
                            Price = 10.00m,
                            Title = "Бебешки сладки"
                        },
                        new
                        {
                            Id = 32,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2270),
                            ImageUrl = "~/images/seeding/biscuit/MikeyMaus.jpg",
                            Price = 12.00m,
                            Title = "Мики маус"
                        },
                        new
                        {
                            Id = 33,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2272),
                            ImageUrl = "~/images/seeding/biscuit/VetTime.jpg",
                            Price = 15.00m,
                            Title = "Vet time"
                        },
                        new
                        {
                            Id = 34,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2276),
                            ImageUrl = "~/images/seeding/biscuit/FormMiniMaus.jpg",
                            Price = 13.00m,
                            Title = "Форма мини маус"
                        },
                        new
                        {
                            Id = 35,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2278),
                            ImageUrl = "~/images/seeding/biscuit/MuffinsPony.jpg",
                            Price = 11.00m,
                            Title = "Кехчета еднорог"
                        },
                        new
                        {
                            Id = 36,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2280),
                            ImageUrl = "~/images/seeding/biscuit/MuffinsMikeyMaus.jpg",
                            Price = 10.00m,
                            Title = "Кехчета мики маус"
                        },
                        new
                        {
                            Id = 37,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2283),
                            ImageUrl = "~/images/seeding/biscuit/MuffinsWithBears.jpg",
                            Price = 12.00m,
                            Title = "Кехчета с мечета"
                        },
                        new
                        {
                            Id = 38,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2285),
                            ImageUrl = "~/images/seeding/biscuit/FormOfOne.jpg",
                            Price = 15.00m,
                            Title = "Бисквити във формата на единица"
                        },
                        new
                        {
                            Id = 39,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2287),
                            ImageUrl = "~/images/seeding/biscuit/Bears.jpg",
                            Price = 13.00m,
                            Title = "Меченца"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2024, 4, 20, 20, 13, 15, 665, DateTimeKind.Local).AddTicks(2290),
                            ImageUrl = "~/images/seeding/biscuit/VierLeaf.jpg",
                            Price = 11.00m,
                            Title = "Четирилистна детелина"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Biscuit", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.BiscuitCategory", "Category")
                        .WithMany("Biscuits")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cake", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.CakeCategory", "Category")
                        .WithMany("Cakes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Cart", "Cart")
                        .WithOne()
                        .HasForeignKey("SugarDecoration.Infrastructure.Data.Models.Order", "CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.BiscuitCategory", b =>
                {
                    b.Navigation("Biscuits");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CakeCategory", b =>
                {
                    b.Navigation("Cakes");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
