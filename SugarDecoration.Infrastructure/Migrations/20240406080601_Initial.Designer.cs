// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SugarDecoration.Infrastructure.Data;

#nullable disable

namespace SugarDecoration.Infrastructure.Migrations
{
    [DbContext(typeof(SugarDecorationDb))]
    [Migration("20240406080601_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1182e1d8-c799-413d-a9d3-c809966f5ed2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "557d7e3a-f2e2-45b4-b373-afde8356d104",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.bg",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECWFBdk48sLPQ3+VoyApNLhFUrQQfx2H4Q+DpVAJPCucPAFQEuhMyoBY9gh0V+OPRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f364b18d-0819-4b36-945a-ed501d166c54",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = "3b034442-ee41-4acb-92cb-374f72d60a59",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9428fd6-2741-42e5-b646-cb8bf2f47662",
                            Email = "g_ivanov@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "G_IVANOV@ABV.bg",
                            NormalizedUserName = "GOSHE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOagayWVrCkVfIABV96vwydXK2JMFu6Yad8SqLjPbuw6lG3Nh0aYsKK9fNO2aaczFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c4866db-a4b6-4847-a8ae-df9d11cf54ef",
                            TwoFactorEnabled = false,
                            UserName = "g_ivanov@abv.bg"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Biscuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Biscuit identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Biscuit quantity");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Biscuits");

                    b.HasComment("Biscuit table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ProductId = 11,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ProductId = 12,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            ProductId = 13,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            ProductId = 14,
                            Quantity = 12
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            ProductId = 15,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.BiscuitCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("BiscuitCategories");

                    b.HasComment("Category for biscuit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Коледни"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Декоративни"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Специален повод"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cake identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Cake form");

                    b.Property<int>("Layers")
                        .HasColumnType("int")
                        .HasComment("Cake layers");

                    b.Property<int>("Portions")
                        .HasColumnType("int")
                        .HasComment("Cake portions");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cakes");

                    b.HasComment("Cake table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Form = "кръгла",
                            Layers = 3,
                            Portions = 35,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 30,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 30,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 20,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 30,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 20,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 2,
                            Portions = 25,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 30,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Form = "кръгла",
                            Layers = 1,
                            Portions = 35,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Form = "полукръгла",
                            Layers = 1,
                            Portions = 10,
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CakeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("CakeCategories");

                    b.HasComment("Category for cake");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Сватбена торта"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Детска торта"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Стандартна торта"
                        },
                        new
                        {
                            Id = 4,
                            Name = "18+"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Специални поводи"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cart identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation of cart");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit")
                        .HasComment("Is the cart ordered");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Last date of modification of cart");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Costumer identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasComment("Cart table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 302, DateTimeKind.Local).AddTicks(2930),
                            IsOrdered = false,
                            ModifiedOn = new DateTime(2024, 4, 6, 11, 6, 1, 302, DateTimeKind.Local).AddTicks(2941),
                            UserId = "1182e1d8-c799-413d-a9d3-c809966f5ed2"
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("Cart identifier");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("CartItem identifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Description of order");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Description of order");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasComment("Cart item");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            ProductId = 1,
                            Id = 1,
                            PhoneNumber = "0884567234",
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            CartId = 1,
                            ProductId = 2,
                            Id = 2,
                            PhoneNumber = "0884567234",
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        },
                        new
                        {
                            CartId = 1,
                            ProductId = 3,
                            Id = 3,
                            PhoneNumber = "0884567234",
                            Quantity = 1,
                            Text = "Бих искал такава торта само ако може да е за 30 парчета за Иван на 10."
                        });
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("Cart identifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of order");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasComment("Order table");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("OrderItem identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasComment("Order item table");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation of the product");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Product image");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product title");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasComment("Product table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(136),
                            ImageUrl = "https://scontent-sof1-1.xx.fbcdn.net/v/t1.6435-9/45418292_1900224123436935_5112515879866728448_n.jpg?_nc_cat=104&ccb=1-7&_nc_sid=5f2048&_nc_ohc=eFIio2QbBlEAX9Yzjue&_nc_ht=scontent-sof1-1.xx&oh=00_AfBoQ7qqdl47HZ7hWnAk-no9njwdW7bf1dMJizkc5xCsOQ&oe=6613AA58",
                            Price = 100.00m,
                            Title = "Съпруг и съпруга със сини и бели рози"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(169),
                            ImageUrl = "https://scontent-sof1-1.xx.fbcdn.net/v/t31.18172-8/11950324_881502548642436_5301516909345454510_o.jpg?_nc_cat=100&ccb=1-7&_nc_sid=5f2048&_nc_ohc=im4NrlMRDwoAX906LIT&_nc_ht=scontent-sof1-1.xx&oh=00_AfANMiRCdEFjBHMKqzdVQ8CfmwHERZjyswaGHkTpw3deDw&oe=66139F73",
                            Price = 120.00m,
                            Title = "Златни рози"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(172),
                            ImageUrl = "https://scontent-sof1-2.xx.fbcdn.net/v/t1.6435-9/118890298_3193596277433040_3828589938106568560_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=5f2048&_nc_ohc=dMYD1Y2twPAAX-5TIdq&_nc_oc=AQmB6ydQvkgot9gup32CReBa78Uc9nJ0lxvLge5csyOGMtoviBAviNqd5ot6C3mvjZ4&_nc_ht=scontent-sof1-2.xx&oh=00_AfCKvMW1pK86G0-3Uvc3A4efBy5a7ZXvntK3EIguunlpsg&oe=6613AE2C",
                            Price = 150.00m,
                            Title = "Съпруг и съпруга с червени рози и бели цветя"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(175),
                            ImageUrl = "https://scontent.fsof10-1.fna.fbcdn.net/v/t31.18172-8/11940464_881502551975769_3150965239804644226_o.jpg?_nc_cat=111&ccb=1-7&_nc_sid=5f2048&_nc_ohc=lIiz0CvrQOAAX8yrHv6&_nc_ht=scontent.fsof10-1.fna&oh=00_AfDS01MUNTFuECPkpvob8zZZXmMJKbYgvCTwQahwOQCQIg&oe=6620333B",
                            Price = 120.00m,
                            Title = "бели цветя"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(177),
                            ImageUrl = "https://scontent.fsof10-1.fna.fbcdn.net/v/t1.6435-9/81678509_2608157715976902_8711874778027261952_n.jpg?_nc_cat=100&ccb=1-7&_nc_sid=5f2048&_nc_ohc=dn9ncHjKXt8AX8V4imn&_nc_oc=Adjiqz8TQNQuH0VsI2W2J8AQwDjcgr4XPGHPeTXPJ2qkeaZqY5bGxFIsMXkoAPWg4Jo&_nc_ht=scontent.fsof10-1.fna&oh=00_AfAjqqJ0cgKuP1WozZm7dEPBE_51dVR12bcJ2UmxChzeYg&oe=66201CA0",
                            Price = 110.00m,
                            Title = "бели цветя"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(181),
                            ImageUrl = "https://scontent-sof1-2.xx.fbcdn.net/v/t1.6435-9/137404609_3542798825846115_8434655239208905708_n.jpg?_nc_cat=107&ccb=1-7&_nc_sid=5f2048&_nc_ohc=6mljKPhHnjIAX9LqFQP&_nc_ht=scontent-sof1-2.xx&oh=00_AfBpxiR_gQOHHryQJJG74wnITMjeC-uP-D7yn1swVD6-9w&oe=6630BA9C",
                            Price = 60.00m,
                            Title = "Ауди (Христо 20)"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(184),
                            ImageUrl = "https://scontent-sof1-2.xx.fbcdn.net/v/t1.6435-9/140654272_3565104620282202_1586972040598179455_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=5f2048&_nc_ohc=Vj0NGhYBi5UAX8K_V_D&_nc_oc=AdhlsQ819_EuGRxSBpmepYYaVVPNKFAYniEjOeksAzIo73lVtWBOfl5WxyqG1XiN4Dg&_nc_ht=scontent-sof1-2.xx&oh=00_AfC9AO_padKrBp4jE-hg43Wd9pRoGwVrfaOVaUdMvX6yLw&oe=6630D046",
                            Price = 70.00m,
                            Title = "Тик ток (Краси 9)"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(186),
                            ImageUrl = "https://scontent-sof1-2.xx.fbcdn.net/v/t1.6435-9/141452606_3575133479279316_4925539086264007770_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=5f2048&_nc_ohc=2fq3kZ-mCbQAX8H16po&_nc_ht=scontent-sof1-2.xx&oh=00_AfCaQLmus1wBRboVdTFOEANkgvgwaROC7cLRXmUxpxSK8g&oe=6630B930",
                            Price = 65.00m,
                            Title = "Stranger Things (Емануела 12)"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(189),
                            ImageUrl = "https://scontent-sof1-1.xx.fbcdn.net/v/t1.6435-9/144275472_3592112990914698_7625468473701199444_n.jpg?_nc_cat=100&ccb=1-7&_nc_sid=5f2048&_nc_ohc=0U-MJHaY2wcAX-Ulp2B&_nc_ht=scontent-sof1-1.xx&oh=00_AfB9kj9vo2afu6ByV-zqG_1Xhr86byOFMxbmJoRDyE-nIg&oe=6630C891",
                            Price = 80.00m,
                            Title = "Шоколад, портокал и уиски (Юбилей 50)"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(192),
                            ImageUrl = "https://scontent-sof1-2.xx.fbcdn.net/v/t1.6435-9/144577998_3598291693630161_1749300887982667483_n.jpg?_nc_cat=111&ccb=1-7&_nc_sid=5f2048&_nc_ohc=-LGMg0ot0EkAX8TkT1w&_nc_ht=scontent-sof1-2.xx&oh=00_AfBxnZXhfdImfFwWDpZcFHSjWwyx0dVw9SoN_ujnIvrTWg&oe=6630C07C",
                            Price = 50.00m,
                            Title = "Бебе Бос (Николай 1/2)"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(195),
                            ImageUrl = "https://scontent.fsof10-1.fna.fbcdn.net/v/t1.6435-9/127996258_3428591943933471_6613145035034934063_n.jpg?_nc_cat=106&ccb=1-7&_nc_sid=5f2048&_nc_ohc=rPtEwbVYSpsAX8PKZXU&_nc_ht=scontent.fsof10-1.fna&oh=00_AfD393zUJS7ZhFbPMSxqEvvGouqHlkLrInYKA97sq2Hdvg&oe=6624BF3F",
                            Price = 10.00m,
                            Title = "Коледни елхи"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(198),
                            ImageUrl = "https://scontent.fsof10-1.fna.fbcdn.net/v/t1.18169-9/12301697_913490672110290_3131707004579174335_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=5f2048&_nc_ohc=ORKDJKSWeZoAX_k70au&_nc_ht=scontent.fsof10-1.fna&oh=00_AfCU2TCno1TEOAxjtlDR3eVOY3eJcWK_lWlPD7c2VyMphg&oe=6624A21A",
                            Price = 12.00m,
                            Title = "Коледни фигури"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(200),
                            ImageUrl = "https://scontent.fsof10-1.fna.fbcdn.net/v/t39.30808-6/346885612_1175653887168525_5354008429856402980_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=5f2048&_nc_ohc=hObhR06Be5kAX-tTgc6&_nc_ht=scontent.fsof10-1.fna&oh=00_AfDokQeGR3jVPFokGOf4T-2ErzAqwXyrUMnNwn7NHqgQdw&oe=66025108",
                            Price = 15.00m,
                            Title = "Еднорог"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(203),
                            ImageUrl = "https://scontent.fsof10-1.fna.fbcdn.net/v/t39.30808-6/429942016_1126158058806458_357351569670082917_n.jpg?_nc_cat=106&ccb=1-7&_nc_sid=5f2048&_nc_ohc=52_xuh-8AD8AX8IJkDL&_nc_ht=scontent.fsof10-1.fna&oh=00_AfC2GOft8pteFCSZoG6CAy8Ot_y5swfu7kOtrW4GqwPhkw&oe=6602E783",
                            Price = 13.00m,
                            Title = "Баба Марта"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2024, 4, 6, 11, 6, 1, 300, DateTimeKind.Local).AddTicks(244),
                            ImageUrl = "https://scontent-sof1-2.xx.fbcdn.net/v/t31.18172-8/13767216_1052053388254017_5059430311043810834_o.jpg?_nc_cat=107&ccb=1-7&_nc_sid=5f2048&_nc_ohc=4rgx72Z99dsAX8T8yY9&_nc_ht=scontent-sof1-2.xx&oh=00_AfD7EXfGxSBOaVttui_hAOofFJXB-E7elqHjskgoEr5yHA&oe=6630E30F",
                            Price = 11.00m,
                            Title = "Пролетна тема"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Biscuit", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.BiscuitCategory", "Category")
                        .WithMany("Biscuits")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cake", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.CakeCategory", "Category")
                        .WithMany("Cakes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Cart", "Cart")
                        .WithOne()
                        .HasForeignKey("SugarDecoration.Infrastructure.Data.Models.Order", "CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Account.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.OrderItem", b =>
                {
                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SugarDecoration.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.BiscuitCategory", b =>
                {
                    b.Navigation("Biscuits");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.CakeCategory", b =>
                {
                    b.Navigation("Cakes");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SugarDecoration.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
